name: Release

on:
  pull_request:
    types: [closed]
    branches:
      - release

jobs:
  tag-and-publish:
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'release' && github.event.pull_request.head.ref == 'main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.18

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Bump version and create tag
        id: version
        run: |
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "New version: ${NEW_VERSION}"

          # Check if tag already exists
          if git rev-parse "v${NEW_VERSION}" >/dev/null 2>&1; then
            echo "Tag v${NEW_VERSION} already exists. Checking for next version..."
            # Get the latest tag and increment patch version
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
            echo "Latest tag: ${LATEST_TAG}"
            
            # Extract version number and increment
            CURRENT_MAJOR_MINOR_PATCH=$(echo ${LATEST_TAG} | sed 's/v//')
            IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_MAJOR_MINOR_PATCH"
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
            echo "Incremented version: ${NEW_VERSION}"
            
            # Update package.json with new version
            node -e "
              const fs = require('fs');
              const pkg = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
              pkg.version = '${NEW_VERSION}';
              fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2) + '\n');
            "
          fi

          echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json
          git commit -m "chore: bump version to ${NEW_VERSION}" || echo "No changes to commit"
          git tag v${NEW_VERSION}
          git push origin v${NEW_VERSION}
          git push origin HEAD

      - name: Build package
        run: |
          bun run prepare
          bun run build

      - name: Publish to npm
        if: ${{ github.secrets.NPM_TOKEN != '' }}
        env:
          NODE_AUTH_TOKEN: ${{ github.secrets.NPM_TOKEN }}
        run: |
          echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" > ~/.npmrc
          npm publish --access public
