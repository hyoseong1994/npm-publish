name: Create Release Tag

on:
  pull_request:
    types: [labeled, unlabeled]

jobs:
  create-tag:
    if: |
      contains(github.event.pull_request.labels.*.name, 'release') &&
      github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from PR or package.json
        id: validate-version
        run: |
          # Try to extract version from PR title first
          PR_TITLE="${{ github.event.pull_request.title }}"
          VERSION=""

          # Check if PR title contains version (e.g., "Release v1.0.0")
          if echo "$PR_TITLE" | grep -E 'Release v[0-9]+\.[0-9]+\.[0-9]+' >/dev/null; then
            VERSION=$(echo "$PR_TITLE" | grep -oE 'v[0-9]+\.[0-9]+\.[0-9]+' | head -1 | sed 's/v//')
          else
            # Fallback: get current version from package.json and increment patch
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
            NEW_PATCH=$((PATCH + 1))
            VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
          fi

          # Validate semantic version format
          if ! echo "$VERSION" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' > /dev/null; then
            echo "❌ Invalid version format: $VERSION"
            echo "Please use semantic version format (e.g., 1.0.0, 2.1.3)"
            exit 1
          fi

          echo "✅ Version determined: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if tag already exists
        run: |
          VERSION="${{ steps.validate-version.outputs.version }}"
          TAG_NAME="v$VERSION"

          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "❌ Tag $TAG_NAME already exists"
            echo "Available tags:"
            git tag | sort -V | tail -10
            exit 1
          fi

          echo "✅ Tag $TAG_NAME does not exist, proceeding..."

      - name: Update package.json version
        run: |
          VERSION="${{ steps.validate-version.outputs.version }}"

          echo "Updating package.json version to $VERSION"

          # Update package.json version
          node -e "
            const fs = require('fs');
            const pkg = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
            const oldVersion = pkg.version;
            pkg.version = '$VERSION';
            fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2) + '\n');
            console.log('Updated package.json version from', oldVersion, 'to', '$VERSION');
          "

      - name: Verify package.json version
        run: |
          VERSION="${{ steps.validate-version.outputs.version }}"
          PACKAGE_VERSION=$(node -p "require('./package.json').version")

          if [ "$PACKAGE_VERSION" != "$VERSION" ]; then
            echo "❌ Failed to update package.json version. Expected: $VERSION, Got: $PACKAGE_VERSION"
            exit 1
          fi

          echo "✅ Package.json version verified: $PACKAGE_VERSION"

      - name: Create and push tag
        run: |
          VERSION="${{ steps.validate-version.outputs.version }}"
          TAG_NAME="v$VERSION"

          echo "Creating tag: $TAG_NAME"

          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Add changes if package.json was updated
          git add package.json
          git commit -m "chore: bump version to $VERSION" || echo "No changes to commit"
          git push origin HEAD

          # Create and push tag
          git tag "$TAG_NAME"
          git push origin "$TAG_NAME"

          echo "✅ Successfully created and pushed tag: $TAG_NAME"
